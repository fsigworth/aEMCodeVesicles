% rlMatchUnsubWithSub.m
% This program finds unsub particle image names matching the subtracted
% particle names in the input star file, which is typically a
% particles.star run_data.star file from a Select or Refine3D job. We'll
% call it In_v.star. 
% The program relies on two particle.star files from
% extract jobs; call them Ex_v and Ex_u. We assume that (1) In_v.star
% contains a subset of the Ex_v particles, all vesicle-subtracted; and (2)
% there is a line-by-line match between Ex_v and Ex_u. (The latter occurx
% if Ex_v and Ex_u are created from Extract jobs using the particle_v and
% particle_u files created by rlMiToStarFiles, or if they are created from
% Extract jobs based on such Extract jobs.) `
% 
% This program does one of two things. 
% 1. It can add the rlReconstructImageName field to In_v.star to yield a
% file whose modified name would be In_v+unsub.star. This allows Refine3D
% to perform a final reconstruction with unsubtracted particles.
% 2. Or it can create a file In_v_unsub.star file that mirrors In_v but
% with unsub particles only. This can be used for re-extracting unsub
% particles in parallel with the subtracted particles.
% 3. If the input stack contains the rlnReconstructImageName field, we can
% write a separate In_v_sub file as well that lacks it.
% Finally, a log file is written out, called In_v_log.txt.
% The new files are all written back into the directory where
% In_v.star was found.


% particles.star name
% inStarName='Select/job023/particles.star'; 20240126
% % inStarName='RSC1_C24-4/particles_rso_all.star';
%inStarName='Refine3D/job263/run_data.star';

%inStarName='Extract/job184/particles.star';

%inStarName='JoinStar/job099/join_particles.star';
%refVStarName='Extract/job008/particles.star';
%refUStarName='Extract/job007/particles.star';
% refVStarName='Extract/job174/particles.star';
% refUStarName='Extract/job184/particles.star';


% 20240424. Particles that gave the interesting Class3D206 subtracted particles.
%inStarName='Refine3D/job048/particles_rso_all.star'; % Subtracted stack!
inStarName='Select/job050/particles.star';
inStarName='Class3D/job051/run_it025_data.star'
doReadReferences=0; % in case we want to re-use the reference read in!

% alpha alone, 128 pixel ref particles
refVStarName='Extract/job040/particles.star';
%refVStarName='JoinStar/job080/join_particles.star';
%refUStarName='JoinStar/job106/join_particles.star';
refUStarName='Extract/job039/particles.star';



% % For 20240205BNL
% %inStarName='Select/job022/particles_rso_t20_all.star';
% inStarName='Refine3D/job215/run_data.star';
% %inStarName='JoinStar/job099/join_particles.star'
% % inStarName='Class3D/job112/run_it025_data.star';
% % inStarName='Select/job114/particles.star'
% % refVStarName='Extract/job017/particles.star';
% % refUStarName='Extract/job018/particles.star';
% % refVStarName='Extract/job050/particles.star';

% % refUStarName='Extract/job100/particles.star';
% refVStarName='JoinStar/job109/join_particles.star';
% refUStarName='JoinStar/job110/join_particles.star';
% 

selectClasses=3; % vector of class numbers, 0 to select all.
insertReconstructImage=1; % 1: Yes, do put in the rlnReconstructImage field
                         % and write out particles+unsub.star.
writeUnsubStack=1; % 1: Create a new stack particles_unsub.star
writeSubStack=1; % Create a new stack particles_sub.star having no reconstruct image name.
%%
if selectClasses
    classString=sprintf('_class%00d',selectClasses);
else
    classString='';
end;
[pa, nm, ex]=fileparts(inStarName);
outStarName1=[pa filesep nm '+unsub' classString ex];
outStarName2=[pa filesep nm '_unsub' classString ex];
outStarName3=[pa filesep nm '_sub' classString ex];
outLogName=[pa filesep nm '_log' classString '.txt'];

% Get the pair of micrograph.star files. We assume that the unsub and
% subtracted micrograph names are on the same rows in the files.
if ~exist(inStarName,'file')
    disp(['The input file ' inStarName ' can''t be found.']);
    return
end;

if doReadReferences
    
    disp(['Reading V reference: ' refVStarName]);
    [nmv,datv]=ReadStarFile(refVStarName);
    vImgNames=datv{2}.rlnImageName;
    
    %%
    disp(['Reading U reference: ' refUStarName]);
    [nmu,datu]=ReadStarFile(refUStarName);
    uImgNames=datu{2}.rlnImageName;
    uMicNames=datu{2}.rlnMicrographName;
end;

nUNames=numel(uImgNames);
if numel(vImgNames)~=nUNames
    disp('Numbers of rows don''t match. Exiting.');
    return
end;

disp('Decoding refVStar names.')
[~,vFileNames]=rlDecodeImageName(vImgNames);
[vFileUniques,vFirst,vLookup]=unique(vFileNames);

disp('Decoding refUStar names.')
[~,uFileNames]=rlDecodeImageName(uImgNames);
%%
% Get the input particle.star file.
disp(['Reading the input file: ' inStarName]);
[nmp,datp]=ReadStarFile(inStarName);
nparts=numel(datp{2}.rlnImageName);
dOut=datp{2}; % Copy the particle data.

disp(['Decoding ' num2str(nparts) ' particle names']);
[pSlices,inFileNames]=rlDecodeImageName(dOut.rlnImageName);
[pFileUniques,pFirsts,pLookup]=unique(inFileNames);

% match the particle filenames with refVStar
nu=numel(pFileUniques);

numFailedMatches=0;
matchFileInds=zeros(nu,1);
for i=1:numel(pFileUniques)
    q=strcmp(pFileUniques{i},vFileUniques);
    ind=find(q);
    if numel(ind)>1
        disp(['Duplicated micrograph name? ' pFileUniques{i}]);
    elseif numel(ind)<1
        numFailedMatches=numFailedMatches+1;
        if numFailedMatches<=10 || mod(numFailedMatches,1000)==0
            disp(['No matching micrograph name: ' pFileUniques{i}]);
        end;
        continue;
    end;
    matchFileInds(i)=ind;
end;
if numFailedMatches>0
    disp([num2str(numFailedMatches) ' failed matches of ' numel(pFileUniques)]);
    return
end;

% for each pLookup, get matchFileInds(pLookup) which point into
% vFileUniques. vFirst(matchFileInds(pLookup)) points to the uFileName.

uNames=cell(nparts,1);
umNames=cell(nparts,1);
disp('Creating the new particle names');
for i=1:nparts
    newNameInd=vFirst(matchFileInds(pLookup(i)));
    newName=[num2str(pSlices(i),'%06d') '@' uFileNames{newNameInd}];
    uNames{i}=newName;
    umNames(i)=uMicNames(newNameInd); % pick up the micrograph name too.
end;

dOutU=dOut; % output data for unsub case.
dOutU.rlnImageName=uNames;
dOutU.rlnMicrographName=umNames;

if isfield(dOut,'rlnReconstructImageName')
    writeSubStack=true;
    dOutS=rmfield(dOut,'rlnReconstructImageName');
else
    dOutS=dOut;
end;

% output data for sub + unsub case.
dOutUV=dOut;
dOutUV.rlnReconstructImageName=uNames;


if selectClasses
    active=any(dOutU.rlnClassNumber==selectClasses);
else
    active='';
end;
activeCells={''; active};

%%
if insertReconstructImage
    disp(['Writing the output file ' outStarName1]);
    dato=datp; % copy the input structs
    dato{2}=dOutUV; % replace the particle data
    WriteStarFile(nmp,dato,outStarName1,'',activeCells);
    disp('done.')
end;

if writeUnsubStack
    disp(['Writing the output file ' outStarName2]);
    datoU=datp;
    datoU{2}=dOutU;
    WriteStarFile(nmp,datoU,outStarName2,'',activeCells);
    disp('done.')    
end;

%
if writeSubStack
    disp(['Writing the output file ' outStarName3]);
    datoS=datp;
    datoS{2}=dOutS;
    WriteStarFile(nmp,datoS,outStarName3,'',activeCells);
    disp('done.')    
end;
%%
if insertReconstructImage || writeUnsubStack || writeSubStack
    disp(['Writing ' outLogName]);
    % Create a log file.
    fLog=fopen(outLogName,'a');
    fprintf(fLog,'--rlMatchUnsubWithSub-- %s\n',date);
    fprintf(fLog,'inStarname:  %s\n', inStarName);
    fprintf(fLog,'refVStarName: %s\n', refVStarName);
    fprintf(fLog,'refUStarName: %s\n', refUStarName);
    fprintf(fLog,'outStarName1: %s\n',outStarName1);
    fprintf(fLog,'\n');
    fclose(fLog);

end;
disp('done.');


% Primitive old code.

% 
% 
% 
% inStarName='Select/job191/particles.star';
% outStarName='Select/job191/particles+unsub.star';
% 
% disp(['Reading ' inStarName]);
% imgNames=dat{2}.rlnImageName;
% 
% whos imgNames
% %%
% outNames=imgNames;
% nim=numel(imgNames);
% for i=1:nim
%     [partInd,micName]=rlDecodeImageName(imgNames{i});
%     [pa,nm,ex]=fileparts(micName);
%     nm(end)='u'; % swap the final character from 'v' to 'u'
%     name=imgNames{i};
%     if strndcmp(name(end-4:end),'.mrcs')
%         name(end-5)='u'; % mark unsubtracted
%         disp(name);
%         return
%     end;
% end;


% Simple old code...
%
% % rlAddReconstructImageName
% % add the column to a particles.star file
% 
% inStarName='Select/job191/particles.star';
% outStarName='Select/job191/particles+unsub.star';
% 
% disp(['Reading ' inStarName]);
% [nm,dat]=ReadStarFile(inStarName);
% imgNames=dat{2}.rlnImageName;
% 
% whos imgNames
% %%
% outNames=imgNames;
% nim=numel(imgNames);
% for i=1:nim
%     [partInd,micName]=rlDecodeImageName(imgNames{i});
%     [pa,nm,ex]=fileparts(micName);
%     nm(end)='u'; % swap the final character from 'v' to 'u'
%     name=imgNames{i};
%     if strndcmp(name(end-4:end),'.mrcs')
%         name(end-5)='u'; % mark unsubtracted
%         disp(name);
%         return
%     end;
% end;